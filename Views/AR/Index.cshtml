
@{
    ViewBag.Title = "Index";
}

<link rel="stylesheet" href="https://www.w3schools.com/w3css/4/w3.css">

<script src="https://unpkg.com/merge-images@2.0.0/dist/index.umd.js"></script>
<script src="https://cdn.jsdelivr.net/gh/aframevr/aframe@1c2407b26c61958baa93967b5412487cd94b290b/dist/aframe-master.min.js"></script>
<script src="https://raw.githack.com/AR-js-org/AR.js/master/aframe/build/aframe-ar-nft.js"></script>
<script src="https://ajax.googleapis.com/ajax/libs/jquery/3.4.1/jquery.min.js" type="text/javascript"></script>
<script src="~/Scripts/Recorder.js" type="text/javascript"></script>
	
<style>
  .arjs-loader {
    height: 100%;
    width: 100%;
    position: absolute;
    top: 0;
    left: 0;
    background-color: rgba(0, 0, 0, 0.8);
    z-index: 9999;
    display: flex;
    justify-content: center;
    align-items: center;
  }

  .arjs-loader div {
    text-align: center;
    font-size: 1.25em;
    color: white;
  }
  
  .proButton {
		height: 100%;
		width: 100%;
		position: absolute;
		top: 0;
		left: 0;
		background-color: rgba(0, 0, 0, 0.0);
		z-index: 9999;
		display: flex;
		justify-content: center;
		align-items: center;
	}
</style>

<body style="margin : 0px; overflow: hidden;">
  <!-- minimal loader shown until image descriptors are loaded -->
	<div class="arjs-loader">
	<div>Loading, please wait...</div>
	</div>
  
  	<div class="proButton" id="image_for_crop">
	</div>
	
	<div class="proButton" id="btnRecord" onclick="startRecording()">
		<div class="w3-button w3-xlarge w3-circle w3-red w3-card-4">+</div>
	</div>
  
    <a-scene vr-mode-ui="enabled: false;"
             renderer="logarithmicDepthBuffer: true;"
             embedded
             arjs="trackingMethod: best; sourceType: webcam;debugUIEnabled: false;">
        <!-- we use cors proxy to avoid cross-origin problems -->
        <a-nft type="nft"
               url="https://arjs-cors-proxy.herokuapp.com/https://raw.githack.com/AR-js-org/AR.js/master/aframe/examples/image-tracking/nft/trex/trex-image/trex"
               smooth="true"
               smoothCount="10"
               smoothTolerance=".01"
               smoothThreshold="5">
            <a-entity gltf-model="https://arjs-cors-proxy.herokuapp.com/https://raw.githack.com/AR-js-org/AR.js/master/aframe/examples/image-tracking/nft/trex/scene.gltf"
                      scale="5 5 5"
                      position="50 150 0">
            </a-entity>
        </a-nft>
        <a-entity camera></a-entity>
    </a-scene>
  
  <script>
        function resizeCanvas(origCanvas, width, height) {
            let resizedCanvas = document.createElement("canvas");
            let resizedContext = resizedCanvas.getContext("2d");

            resizedCanvas.height = width;
            resizedCanvas.width = height;

            resizedContext.drawImage(origCanvas, 0, 0, width, height);
            return resizedCanvas.toDataURL();
        }

        function startRecording()
        {
            var canvas = document.getElementsByClassName("a-canvas");
            //var canvas = document.querySelector(".a-canvas");
            if(canvas.length == 1)
            {
                var aScene = document.querySelector("a-scene").components.screenshot.getCanvas("perspective");
                var frame = captureVideoFrame("video", "png");
                aScene = resizeCanvas(aScene, frame.width, frame.height);
	            frame = frame.dataUri;

                mergeImages([frame, aScene])
                    .then(b64 => {

                        $.ajax({
                            url: '@Url.Action("asImage", "Save")',
                            type: "POST",
                            data: { 'base64image': b64 },
                            success: function (data) {
                                alert("OK man 6:45");
                            },
                            error: function (xhr, error) {
                                alert("ERROR");
                            }
                        });

                    });

                //var ctx = canvas[0].getContext('webgl');
                //var image = canvas[0].toDataURL("image/png").replace("image/png", "image/octet-stream");  
                //window.location.href = image;
                //var dataURL = canvas[0].toDataURL();
                //var gl = canvas[0].getContext('webgl');
                //console.log(gl);
            
                //var dataURL = gl.canvas.toDataURL();

                @*var gl = canvas[0].getContext("webgl", {preserveDrawingBuffer: true});
                var dataURL = canvas[0].toDataURL();*@

                @*$.ajax({
                    url: '@Url.Action("asImage", "Save")',
                    type: "POST",
                    data: { 'base64image': aScene },
                    success: function (data) {
                        alert("OK man 6:45");
                    },
                    error: function (xhr, error) {
                        alert("ERROR");
                    }
                });
                $.ajax({
                    url: '@Url.Action("asImage", "Save")',
                    type: "POST",
                    data: { 'base64image': frame },
                    success: function (data) {
                        alert("OK man 6:45");
                    },
                    error: function (xhr, error) {
                        alert("ERROR");
                    }
                });*@
                //arSession.parameters.scene
                //console.log(ARjs.Session.parameters);
            }
            else
            {
	            alert('It is not loaded.');
            }
        }

        function captureVideoFrame(video, format, width, height) {
            if (typeof video === 'string') {
                video = document.querySelector(video);
            }

            format = format || 'jpeg';

            if (!video || (format !== 'png' && format !== 'jpeg')) {
                return false;
            }

            var canvas = document.createElement("CANVAS");

            canvas.width = width || video.videoWidth;
            canvas.height = height || video.videoHeight;
            canvas.getContext('2d').drawImage(video, 0, 0);
            var dataUri = canvas.toDataURL('image/' + format);
            var data = dataUri.split(',')[1];
            var mimeType = dataUri.split(';')[0].slice(5)

            var bytes = window.atob(data);
            var buf = new ArrayBuffer(bytes.length);
            var arr = new Uint8Array(buf);

            for (var i = 0; i < bytes.length; i++) {
                arr[i] = bytes.charCodeAt(i);
            }

            var blob = new Blob([ arr ], { type: mimeType });
            return { blob: blob, dataUri: dataUri, format: format, width: canvas.width, height: canvas.height };
        };
  </script>
  
</body>

